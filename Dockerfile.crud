# Dockerfile.crud
#
# Purpose:
# This Dockerfile builds and runs the CRUD API service, which provides a gRPC interface
# for creating, reading, updating, and deleting entities in the system. The service
# connects to both Neo4j (for graph relationships) and MongoDB (for metadata storage).
#
# Usage:
# 1. Build the image:
#    docker build -t crud-service -f Dockerfile.crud .
#
# 2. Run the container:
#    docker run -d \
#      --name crud-service \
#      --network crud-network \
#      -p 50051:50051 \
#      -e NEO4J_URI=bolt://neo4j-local:7687 \
#      -e NEO4J_USER=${NEO4J_USER} \
#      -e NEO4J_PASSWORD=${NEO4J_PASSWORD} \
#      -e MONGO_URI=${MONGO_URI} \
#      crud-service
#
# Environment Variables:
# - NEO4J_URI: Connection URI for Neo4j database (default: bolt://neo4j:7687)
# - NEO4J_USER: Username for Neo4j authentication (default: neo4j)
# - NEO4J_PASSWORD: Password for Neo4j authentication (default: neo4j123)
# - MONGO_URI: Connection URI for MongoDB (default: mongodb://mongo:27017)
# - MONGO_DB_NAME: MongoDB database name (default: testdb)
# - MONGO_COLLECTION: MongoDB collection name (default: metadata)
# - MONGO_ADMIN_USER: MongoDB admin username (default: admin)
# - MONGO_ADMIN_PASSWORD: MongoDB admin password (default: test123456)
# - CRUD_SERVICE_HOST: Host address to bind the service (default: 0.0.0.0)
# - CRUD_SERVICE_PORT: Port to expose the gRPC service (default: 50051)
#
# Note: This service should be run on the same Docker network as Neo4j and MongoDB
# services for proper connectivity. Use the 'crud-network' created with:
# docker network create crud-network

# Build stage for CRUD service
FROM --platform=linux/amd64 golang:1.23 AS builder

# Set working directory
WORKDIR /app

# Copy the source code
COPY . .

# Download dependencies
RUN cd design/crud-api && \
    go mod download

# Build the application
RUN cd design/crud-api && \
    go build -o crud-service cmd/server/service.go cmd/server/utils.go

## Create a new user with UID 10014
# RUN addgroup -g 10014 choreo && \
#     adduser  --disabled-password  --no-create-home --uid 10014 --ingroup choreo choreouser

# Final stage
FROM --platform=linux/amd64 golang:1.24

# Install runtime dependencies and qemu for emulation
RUN apt-get update && \
    apt-get install -y ca-certificates qemu-user-static gnupg curl wget unzip openjdk-17-jdk && \
    # Add MongoDB repository
    curl -fsSL https://pgp.mongodb.com/server-6.0.asc | \
    gpg -o /usr/share/keyrings/mongodb-server-6.0.gpg --dearmor && \
    echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-6.0.gpg ] https://repo.mongodb.org/apt/debian bullseye/mongodb-org/6.0 main" | \
    tee /etc/apt/sources.list.d/mongodb-org-6.0.list && \
    apt-get update && \
    apt-get install -y mongodb-mongosh && \
    # Download and install Cypher Shell
    wget https://dist.neo4j.org/cypher-shell/cypher-shell-5.26.5.zip && \
    unzip cypher-shell-5.26.5.zip && \
    mkdir -p /usr/local/lib/cypher-shell && \
    mv cypher-shell-5.26.5/lib/* /usr/local/lib/cypher-shell/ && \
    # Create a wrapper script with proper classpath
    echo '#!/bin/sh\n\
    CLASSPATH=$(find /usr/local/lib/cypher-shell -name "*.jar" | tr "\\n" ":")\n\
    exec java -cp "$CLASSPATH" org.neo4j.shell.Main "$@"\n\
    ' > /usr/local/bin/cypher-shell && \
    chmod +x /usr/local/bin/cypher-shell && \
    rm -rf cypher-shell-5.26.5.zip cypher-shell-5.26.5 && \
    rm -rf /var/lib/apt/lists/*

# Set Java environment variables
ENV JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
ENV PATH=$JAVA_HOME/bin:$PATH

# Copy the built binary from builder stage
COPY --from=builder /app/design/crud-api/crud-service /usr/local/bin/
COPY --from=builder /app/design/crud-api /app/design/crud-api
COPY --from=builder /etc/passwd /etc/passwd
COPY --from=builder /etc/group /etc/group

# Copy cert generation script and config
COPY choreo/certs/generate-certs.sh /app/certs/
COPY choreo/certs/openssl.cnf /app/certs/

# Install runtime dependencies and OpenSSL
RUN groupadd -r messagebus && \
    apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        ca-certificates \
        openssl \
        wget && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean && \
    # Install grpc_health_probe
    wget -qO/bin/grpc_health_probe https://github.com/grpc-ecosystem/grpc-health-probe/releases/download/v0.4.11/grpc_health_probe-linux-amd64 && \
    chmod +x /bin/grpc_health_probe

# Generate certificates
RUN mkdir -p /app/certs && \
    chmod +x /app/certs/generate-certs.sh && \
    cd /app/certs && ./generate-certs.sh

# Set environment variable for cert path
ENV NEXOAN_SSL_CERT_PATH=/app/certs

# Set environment variables with defaults for Neo4j connection
ENV NEO4J_URI=${NEO4J_URI:-bolt://neo4j:7687}
ENV NEO4J_USER=${NEO4J_USER:-neo4j}
ENV NEO4J_PASSWORD=${NEO4J_PASSWORD:-neo4j123}

# Set MongoDB environment variables with defaults
ENV MONGO_URI=${MONGO_URI:-mongodb://admin:admin123@mongodb:27017/admin?authSource=admin}
ENV MONGO_DB_NAME=${MONGO_DB_NAME:-testdb}
ENV MONGO_COLLECTION=${MONGO_COLLECTION:-metadata}
ENV MONGO_ADMIN_USER=${MONGO_ADMIN_USER:-admin}
ENV MONGO_ADMIN_PASSWORD=${MONGO_ADMIN_PASSWORD:-admin123}

# Set CRUD service environment variables
ENV CRUD_SERVICE_HOST=${CRUD_SERVICE_HOST:-0.0.0.0}
ENV CRUD_SERVICE_PORT=${CRUD_SERVICE_PORT:-50051}

# Add log configuration
ENV LOG_LEVEL=debug
ENV LOG_FORMAT=text

# USER 10014

# Expose ports
EXPOSE 50051

# Create a script to run tests and start the service
RUN echo '#!/bin/sh\n\
echo "Running tests with environment:"\n\
echo "NEO4J_URI: $NEO4J_URI"\n\
echo "MONGO_URI: $MONGO_URI"\n\
\n\
# Test MongoDB connection\n\
echo "Testing MongoDB connection..."\n\
until mongosh --eval "db.adminCommand(\"ping\")" mongodb://admin:admin123@mongodb:27017/admin; do\n\
  echo "Waiting for MongoDB to be ready..."\n\
  sleep 2\n\
done\n\
echo "MongoDB connection successful!"\n\
\n\
# Test Neo4j connection\n\
echo "Testing Neo4j connection..."\n\
until cypher-shell -u neo4j -p neo4j123 -a bolt://neo4j:7687 "CALL dbms.components()"; do\n\
  echo "Waiting for Neo4j to be ready..."\n\
  sleep 2\n\
done\n\
echo "Neo4j connection successful!"\n\
\n\
# Run Go tests\n\
cd /app/design/crud-api\n\
if ! go test -v ./...; then\n\
  echo "Tests failed!"\n\
  exit 1\n\
fi\n\
\n\
echo "Starting CRUD service..."\n\
exec crud-service 2>&1 | tee /app/crud-service.log\n\
' > /app/start.sh && chmod +x /app/start.sh

# Display environment variables and start the service
CMD ["/app/start.sh"]
